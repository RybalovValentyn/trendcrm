{"version":3,"file":"static/js/451.ce45da55.chunk.js","mappings":"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","sources":["components/tableBody/pages/modals/idComponent.jsx","components/tableBody/pages/modals/modalComponent.jsx","components/tableBody/pages/modals/modalcomponent/statusupdate.jsx"],"sourcesContent":["import { Box, Typography } from \"@mui/material\"\r\n\r\nexport const IdComponent=()=>{\r\n    let selected =  [];\r\n    if (sessionStorage.getItem(\"selected\")) {\r\n        selected =  sessionStorage.getItem(\"selected\")?.split(',');\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n\r\n        <Typography sx={{fontSize: '14px', marginTop: '30px'}}>{'ID виділених замовлень:'}</Typography>\r\n        <Box sx={{display: 'flex',flexWrap: 'wrap','@media (max-width: 650px)': {\r\n            width: '80%'\r\n              }}}> {selected?.map((str, i, arr)=>\r\n        <Typography key={i} sx={{fontSize: '14px', }}>{`${str} ${i!==arr.length-1?', ':''}`}</Typography>\r\n            )}</Box>\r\n\r\n    <Typography sx={{fontSize: '14px', marginTop: '20px'}}>{`Вибрано замовлень: ${selected.length}`}</Typography>\r\n    </Box >\r\n    )\r\n}","import Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport {forwardRef } from 'react';\r\nimport { StyledButton } from '../../../buttons/buttons'; \r\nimport { colorsRef } from '../../../../consts/colorConstants';\r\nimport { Box,IconButton } from '@mui/material';\r\n\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {       \r\n    return <Slide direction=\"down\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\nexport const ModalComponent = ({Component, open, closeButtonText, sendButtonText, titleText, \r\n                      funcOnSend,funcOnClouse, borderHeader, borderAction, alignAction}) =>{\r\n\r\n\r\n      const handleSendFromButton=()=>{\r\n        funcOnClouse()\r\n        funcOnSend()\r\n      }\r\n\r\n    return(\r\n        <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        onClose={funcOnClouse}\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        sx={{'& .MuiPaper-root': {width: '600px'}}}\r\n          >\r\n    <Box  sx={{display: 'flex',alignItems: 'center',width: '100%',  justifyContent: 'space-between', borderBottom: borderHeader?`1px solid ${colorsRef.modalInputBorderColor}`:null}}>\r\n        <DialogTitle sx={{'@media (max-width: 650px)': {\r\n          width: '80%', whiteSpace:'pre-wrap',\r\n            }}} >{titleText}</DialogTitle>\r\n        <IconButton onClick={funcOnClouse} component=\"button\" sx={{marginRight: '10px'}}>\r\n            <HighlightOffIcon />\r\n        </IconButton>\r\n        </Box>\r\n\r\n<Component/>\r\n        <DialogActions sx={{width: '100%', borderTop: borderAction?`1px solid ${colorsRef.modalInputBorderColor}`:null , \r\n                        paddingTop: borderAction?'20px':'10px', paddingBottom: borderAction?'20px':'10px',\r\n                        textAlign: alignAction?'center':null,  marginLeft: alignAction?'auto':null, marginRight: alignAction?'auto':null,\r\n                        display: alignAction?'block':null\r\n                        }}>\r\n\r\n        {closeButtonText? <StyledButton\r\n        text={closeButtonText}\r\n        func= {funcOnClouse}\r\n        border= {'#7bb31a'} \r\n           />:null}\r\n\r\n      <StyledButton            \r\n        text={sendButtonText}\r\n        func= {handleSendFromButton}\r\n        border= {closeButtonText?colorsRef.btnAddBorderColor:'#7bb31a'}               \r\n           />\r\n        </DialogActions>\r\n      </Dialog> \r\n    )\r\n}","import DialogContent from '@mui/material/DialogContent';\r\nimport { useDispatch, useSelector,  } from 'react-redux';\r\nimport { getOpenTableCreate, autoUpdate, alertMessageUpdate } from '../../../../../redux/ordersReduser';\r\nimport {Box,Typography,Autocomplete, TextField} from '@mui/material';\r\nimport { useState } from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport {autocompliteInputStyle, textFieldStyles } from '../../order/forms/styles';\r\nimport { setOrderStatusUpdate, getAllStatuses, getFilteredOrders, getAllOrders } from '../../../../../redux/asyncThunc';\r\nimport { useEffect } from 'react';\r\nimport { IdComponent } from '../idComponent';\r\nimport { ModalComponent } from '../modalComponent';\r\n\r\nconst StatusUpdate = () =>{\r\n    const dispatch = useDispatch();\r\n    const statuses = useSelector((state) => state.ordersAll.getStatuses);\r\n    let defaultStatus = statuses.find(str=> str.id === '4'); \r\n    const openstatusUpdate = useSelector((state) => state.ordersAll.modalControl.status_update);\r\n    const columns = useSelector((state) => state.ordersAll.columns);\r\n    const isStatusUpdated =  useSelector((state) => state.ordersAll.isStatusUpdated);\r\n    const filteredRows = useSelector((state) => state.ordersAll.tHeadColumnFiltered);\r\n    const renderFilteredStatus = statuses.reduce((acc, status, index, array)=>{\r\n         if (acc.findIndex(n=>n.name === status.name) === -1 && status.id !== 0) {\r\n            acc.push(status)\r\n        }\r\n       return acc\r\n     },[])\r\n\r\n\r\n    const [status, setStatus] = useState(0);\r\n    \r\n    let selected =  [];\r\n    if (sessionStorage.getItem(\"selected\")) {\r\n        selected =  sessionStorage.getItem(\"selected\")?.split(',');\r\n    }\r\n    if (selected.length >0) {\r\n      let d = columns.find(n=>n.id === selected[0]).status; \r\n      defaultStatus =  statuses.find(str=> str.id === d);\r\n    }\r\n\r\nuseEffect(()=>{\r\n   \r\nif (isStatusUpdated) {\r\n    successAlert()\r\n    getUpdate()   \r\n    dispatch(autoUpdate({id: 'isStatusUpdated', str: false}));\r\n}\r\n},[isStatusUpdated])\r\n\r\n\r\nconst successAlert = () => {\r\n    dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n    withReactContent(Swal).fire({  \r\n        title: isStatusUpdated?'Переміщено':'Увага!',  \r\n        text: isStatusUpdated?'Замовлення успішно переміщено':'Не всі статуси оновлено',\r\n        icon: isStatusUpdated?'success':'error',\r\n        confirmButtonColor: '#3085d6',\r\n        confirmButtonText: 'Ok',\r\n      })    \r\n}\r\n\r\n\r\nconst handleClouse =(e)=>{\r\n   \r\n  dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n}\r\nconst listStyle={\r\n    display: 'flex',\r\n    padding: '7px 12px',\r\n    borderRadius: '8px',\r\n    width: 'max-content'\r\n   \r\n}\r\n\r\nconst handleSubmit=()=>{\r\n   if (!selected || selected.length === 0) {\r\n   return dispatch(alertMessageUpdate({message: 'idSelectedWarn', type: 'warn'}))\r\n   } else if (selected[0] && selected.length === 1) {\r\n        successAlert()\r\n        dispatch(setOrderStatusUpdate({id: selected[0], status: String(status)}))\r\n        return\r\n        } else if(selected.length > 1){\r\n            successAlert()\r\n            selected.map(n=>{\r\n                if (Number(n)) {\r\n                    dispatch(setOrderStatusUpdate({id: String(n), status: String(status)}))\r\n                }\r\n            })\r\n            return\r\n        }  \r\n          \r\n};\r\n\r\nconst onAutocompliteChange=(e)=>{    \r\n    let ind = e.target.id.split('-')[2]     \r\nif (Number(ind)) {\r\n    setStatus(statuses[ind].id)\r\n}\r\n};\r\nconst getUpdate = ()=>{\r\n    dispatch(getAllStatuses());\r\n    if (filteredRows?.length > 0) {\r\n      dispatch(getFilteredOrders())\r\n    } else dispatch(getAllOrders())\r\n  }\r\n\r\nconst Component = ()=>(\r\n  <DialogContent>\r\n        \r\n  <Box sx={{width: '100%'}}>\r\n      <Box sx={{ marginTop: '20px'}}>\r\n      <Typography sx={{fontSize: '16px', margin: '10px 0' }}>{'Новий статус:'}</Typography>\r\n      <Autocomplete\r\n          id={'status'}\r\n          disableClearable\r\n          onChange={onAutocompliteChange}\r\n          value={defaultStatus}                \r\n          options={renderFilteredStatus}\r\n          getOptionLabel={(option) => option.name}\r\n          renderOption={(props, option, { selected }) => (\r\n              <li key={option.id} style={listStyle} {...props}>\r\n                {option.style && <span style={{display: 'block',width: '15px', height: '15px', \r\n                borderRadius: '50%', backgroundColor: option.style, marginRight: '10px'}}></span>}\r\n                {option.name}\r\n              </li>\r\n            )}              \r\n            sx={autocompliteInputStyle}\r\n            renderInput={(params) => <TextField sx={textFieldStyles}  {...params} />}\r\n        />\r\n      </Box>\r\n\r\n  <IdComponent/>\r\n  </Box >\r\n  </DialogContent>\r\n)\r\n\r\n    return(\r\n\r\n      <ModalComponent Component={Component} funcOnClouse={handleClouse} open={openstatusUpdate} sendButtonText={'Зберегти'} titleText={\"Змінити статус для кількох замовлень\"}\r\n      funcOnSend={handleSubmit} borderHeader={true} borderAction={false} alignAction={true}/>\r\n \r\n    )\r\n}\r\n\r\nexport default StatusUpdate"],"names":["IdComponent","selected","sessionStorage","getItem","split","sx","fontSize","marginTop","display","flexWrap","width","map","str","i","arr","length","Transition","forwardRef","props","ref","direction","ModalComponent","Component","open","closeButtonText","sendButtonText","titleText","funcOnSend","funcOnClouse","borderHeader","borderAction","alignAction","TransitionComponent","onClose","alignItems","justifyContent","borderBottom","colorsRef","whiteSpace","onClick","component","marginRight","borderTop","paddingTop","paddingBottom","textAlign","marginLeft","S","text","func","border","dispatch","useDispatch","statuses","useSelector","state","ordersAll","getStatuses","defaultStatus","find","id","openstatusUpdate","modalControl","status_update","columns","isStatusUpdated","filteredRows","tHeadColumnFiltered","renderFilteredStatus","reduce","acc","status","index","array","findIndex","n","name","push","useState","setStatus","d","useEffect","successAlert","getUpdate","autoUpdate","getOpenTableCreate","withReactContent","Swal","fire","title","icon","confirmButtonColor","confirmButtonText","listStyle","padding","borderRadius","onAutocompliteChange","e","ind","target","Number","getAllStatuses","getFilteredOrders","getAllOrders","margin","disableClearable","onChange","value","options","getOptionLabel","option","renderOption","style","height","backgroundColor","autocompliteInputStyle","renderInput","params","textFieldStyles","setOrderStatusUpdate","String","alertMessageUpdate","message","type"],"sourceRoot":""}