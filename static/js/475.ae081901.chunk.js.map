{"version":3,"file":"static/js/475.ae081901.chunk.js","mappings":"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","sources":["components/tableBody/pages/modals/statusupdate.jsx"],"sourcesContent":["import Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport { useDispatch, useSelector,  } from 'react-redux';\r\nimport { forwardRef } from 'react';\r\nimport { getOpenTableCreate, autoUpdate } from '../../../../redux/ordersReduser';\r\nimport { StyledButton } from '../../../buttons/buttons'; \r\nimport { colorsRef } from '../../../../consts/colorConstants';\r\nimport {Box,Typography,IconButton, Switch, Autocomplete, TextField} from '@mui/material';\r\nimport { useState } from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport {autocompliteInputStyle, textFieldStyles } from '../order/forms/styles';\r\nimport { setOrderStatusUpdate, getAllStatuses, getFilteredOrders, getAllOrders } from '../../../../redux/asyncThunc';\r\nimport { useEffect } from 'react';\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {       \r\n    return <Slide direction=\"down\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\n\r\nconst StatusUpdate = () =>{\r\n    const dispatch = useDispatch();\r\n    const statuses = useSelector((state) => state.ordersAll.getStatuses);\r\n    const defaultStatus = statuses.find(str=> str.id === '4'); \r\n    const openstatusUpdate = useSelector((state) => state.ordersAll.modalControl.status_update);\r\n    let selected =  sessionStorage.getItem(\"selected\").split(',');\r\n    const isStatusUpdated =  useSelector((state) => state.ordersAll.isStatusUpdated);\r\n    const filteredRows = useSelector((state) => state.ordersAll.tHeadColumnFiltered);\r\n    const renderFilteredStatus = statuses.reduce((acc, status, index, array)=>{\r\n        if (acc.findIndex(n=>n.name === status.name) === -1) {\r\n            acc.push(status)\r\n        }\r\n       return acc\r\n     },[])\r\n    const [status, setStatus] = useState(0);\r\n\r\n\r\nuseEffect(()=>{\r\n   \r\nif (isStatusUpdated) {\r\n    successAlert()\r\n    getUpdate()   \r\n    dispatch(autoUpdate({id: 'isStatusUpdated', str: false}));\r\n}\r\n},[isStatusUpdated])\r\n\r\nconst MySwal = withReactContent(Swal)\r\n\r\n\r\nconst successAlert = () => {\r\n    withReactContent(Swal).fire({  \r\n        title: isStatusUpdated?'Переміщено':'Увага!',  \r\n        text: isStatusUpdated?'Замовлення успішно переміщено':'Не всі статуси оновлено',\r\n        icon: isStatusUpdated?'success':'error',\r\n        confirmButtonColor: '#3085d6',\r\n        confirmButtonText: 'Ok',\r\n      })\r\n    \r\n}\r\n\r\n\r\nconst handleClouse =(e)=>{\r\n   \r\n  dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n}\r\nconst listStyle={\r\n    display: 'flex',\r\n    padding: '7px 12px',\r\n    borderRadius: '8px',\r\n    width: 'max-content'\r\n   \r\n}\r\n\r\nconst handleSubmit=()=>{\r\n    successAlert()\r\n    dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n    if (Number(selected[0]) && selected.length === 1) {\r\n        dispatch(setOrderStatusUpdate({id: selected[0], status: String(status)}))\r\n        } else if(selected.length > 1){\r\n            selected.map(n=>{\r\n                if (Number(n)) {\r\n                    dispatch(setOrderStatusUpdate({id: String(n), status: String(status)}))\r\n                }\r\n            })\r\n        }  \r\n          \r\n};\r\n\r\nconst onAutocompliteChange=(e)=>{    \r\n    let ind = e.target.id.split('-')[2]     \r\nif (Number(ind)) {\r\n    setStatus(statuses[ind].id)\r\n}\r\n};\r\nconst getUpdate = ()=>{\r\n    dispatch(getAllStatuses());\r\n    if (filteredRows?.length > 0) {\r\n      dispatch(getFilteredOrders())\r\n    } else dispatch(getAllOrders())\r\n  }\r\n\r\n    return(\r\n        <Dialog\r\n        open={openstatusUpdate}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClouse}\r\n        aria-describedby=\"status_update\"\r\n        sx={{overflow: 'hidden',  '& .MuiPaper-root': {width: '600px', top: '-20%'}}}\r\n          >\r\n            <Box  sx={{display: 'flex', justifyContent: 'space-between', alignItems: 'center',\r\n             borderBottom: `1px solid ${colorsRef.modalInputBorderColor}`}}>\r\n            <DialogTitle sx={{width: '80%', whiteSpace: 'wrap', }}>\r\n                {\"Змінити статус для кількох замовлень\"}</DialogTitle>\r\n          <IconButton onClick={handleClouse}  component=\"button\" sx={{marginRight: '10px'}}> \r\n            <HighlightOffIcon />\r\n          </IconButton>\r\n            </Box>\r\n\r\n        <DialogContent>\r\n        \r\n        <Box sx={{width: '100%'}}>\r\n            <Box sx={{ marginTop: '20px'}}>\r\n            <Typography sx={{fontSize: '16px', margin: '10px 0' }}>{'Новий статус:'}</Typography>\r\n            <Autocomplete\r\n                id={'status'}\r\n                onChange={onAutocompliteChange}\r\n                value={defaultStatus}                \r\n                options={renderFilteredStatus}\r\n                getOptionLabel={(option) => option.name}\r\n                renderOption={(props, option, { selected }) => (\r\n                    <li key={option.id} style={listStyle} {...props}>\r\n                      {option.style && <span style={{display: 'block',width: '15px', height: '15px', \r\n                      borderRadius: '50%', backgroundColor: option.style, marginRight: '10px'}}></span>}\r\n                      {option.name}\r\n                    </li>\r\n                  )}              \r\n                  sx={autocompliteInputStyle}\r\n                  renderInput={(params) => <TextField sx={textFieldStyles}  {...params} />}\r\n              />\r\n            </Box>\r\n\r\n            <Typography sx={{fontSize: '14px', marginTop: '30px'}}>{'ID виділених замовлень:'}</Typography>\r\n            <Box sx={{display: 'flex'}}> {selected.map((str, i, arr)=>\r\n            <Typography key={i} sx={{fontSize: '14px'}}>{`${str} ${i!==arr.length-1?', ':''} `}</Typography>\r\n\r\n                )}</Box>\r\n\r\n        <Typography sx={{fontSize: '14px', marginTop: '20px'}}>{`Вибрано замовлень: ${selected[0]?selected.length:'0' }`}</Typography>\r\n        </Box >\r\n        </DialogContent>\r\n        <DialogActions sx={{width: '95%',textAlign: 'center',\r\n         marginLeft: 'auto', marginRight: 'auto', display: 'block', paddingBottom: '20px'}}>\r\n\r\n      <StyledButton            \r\n        text={'Зберегти'}\r\n        func= {handleSubmit}\r\n        border= {'#7bb31a'}               \r\n           />\r\n\r\n        </DialogActions>\r\n      \r\n      </Dialog> \r\n    )\r\n}\r\n\r\nexport default StatusUpdate"],"names":["Transition","forwardRef","props","ref","direction","dispatch","useDispatch","statuses","useSelector","state","ordersAll","getStatuses","defaultStatus","find","str","id","openstatusUpdate","modalControl","status_update","selected","sessionStorage","getItem","split","isStatusUpdated","filteredRows","tHeadColumnFiltered","renderFilteredStatus","reduce","acc","status","index","array","findIndex","n","name","push","useState","setStatus","useEffect","successAlert","getUpdate","autoUpdate","withReactContent","Swal","fire","title","text","icon","confirmButtonColor","confirmButtonText","handleClouse","e","getOpenTableCreate","listStyle","display","padding","borderRadius","width","getAllStatuses","length","getFilteredOrders","getAllOrders","open","TransitionComponent","keepMounted","onClose","sx","overflow","top","justifyContent","alignItems","borderBottom","colorsRef","whiteSpace","onClick","component","marginRight","marginTop","fontSize","margin","onChange","ind","target","Number","value","options","getOptionLabel","option","renderOption","style","height","backgroundColor","autocompliteInputStyle","renderInput","params","textFieldStyles","map","i","arr","textAlign","marginLeft","paddingBottom","S","func","setOrderStatusUpdate","String","border"],"sourceRoot":""}