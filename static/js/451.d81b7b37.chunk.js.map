{"version":3,"file":"static/js/451.d81b7b37.chunk.js","mappings":"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","sources":["components/tableBody/pages/modals/idComponent.jsx","components/tableBody/pages/modals/modalComponent.jsx","components/tableBody/pages/modals/modalcomponent/statusupdate.jsx"],"sourcesContent":["import { Box, Typography } from \"@mui/material\"\r\n\r\nexport const IdComponent=()=>{\r\n    let selected =  [];\r\n    if (sessionStorage.getItem(\"selected\")) {\r\n        selected =  sessionStorage.getItem(\"selected\")?.split(',');\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n\r\n        <Typography sx={{fontSize: '14px', marginTop: '30px'}}>{'ID виділених замовлень:'}</Typography>\r\n        <Box sx={{display: 'flex','@media (max-width: 650px)': {\r\n            width: '80%',display:'flex', flexWrap: 'wrap'\r\n              }}}> {selected?.map((str, i, arr)=>\r\n        <Typography key={i} sx={{fontSize: '14px', }}>{`${str} ${i!==arr.length-1?', ':''} `}</Typography>\r\n            )}</Box>\r\n\r\n    <Typography sx={{fontSize: '14px', marginTop: '20px'}}>{`Вибрано замовлень: ${selected.length}`}</Typography>\r\n    </Box >\r\n    )\r\n}","import Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\r\nimport {forwardRef } from 'react';\r\nimport { StyledButton } from '../../../buttons/buttons'; \r\nimport { colorsRef } from '../../../../consts/colorConstants';\r\nimport { Box,IconButton } from '@mui/material';\r\n\r\n\r\nconst Transition = forwardRef(function Transition(props, ref) {       \r\n    return <Slide direction=\"down\" ref={ref} {...props} />;\r\n  });\r\n\r\n\r\nexport const ModalComponent = ({Component, open, closeButtonText, sendButtonText, titleText, \r\n                      funcOnSend,funcOnClouse, borderHeader, borderAction, alignAction}) =>{\r\n\r\n\r\n      const handleSendFromButton=()=>{\r\n        funcOnClouse()\r\n        funcOnSend()\r\n      }\r\n\r\n    return(\r\n        <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        onClose={funcOnClouse}\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n        sx={{'& .MuiPaper-root': {width: '600px', bottom: '10%'}}}\r\n          >\r\n    <Box  sx={{display: 'flex',alignItems: 'center',width: '100%',  justifyContent: 'space-between', borderBottom: borderHeader?`1px solid ${colorsRef.modalInputBorderColor}`:null}}>\r\n        <DialogTitle sx={{'@media (max-width: 650px)': {\r\n          width: '80%', whiteSpace:'pre-wrap',\r\n            }}} >{titleText}</DialogTitle>\r\n        <IconButton onClick={funcOnClouse} component=\"button\" sx={{marginRight: '10px'}}>\r\n            <HighlightOffIcon />\r\n        </IconButton>\r\n        </Box>\r\n\r\n<Component/>\r\n        <DialogActions sx={{width: '100%', borderTop: borderAction?`1px solid ${colorsRef.modalInputBorderColor}`:null , \r\n                        paddingTop: borderAction?'20px':'10px', paddingBottom: borderAction?'20px':'10px',\r\n                        textAlign: alignAction?'center':null,  marginLeft: alignAction?'auto':null, marginRight: alignAction?'auto':null,\r\n                        display: alignAction?'block':null\r\n                        }}>\r\n\r\n        {closeButtonText? <StyledButton\r\n        text={closeButtonText}\r\n        func= {funcOnClouse}\r\n        border= {'#7bb31a'} \r\n           />:null}\r\n\r\n      <StyledButton            \r\n        text={sendButtonText}\r\n        func= {handleSendFromButton}\r\n        border= {closeButtonText?colorsRef.btnAddBorderColor:'#7bb31a'}               \r\n           />\r\n        </DialogActions>\r\n      </Dialog> \r\n    )\r\n}","import DialogContent from '@mui/material/DialogContent';\r\nimport { useDispatch, useSelector,  } from 'react-redux';\r\nimport { getOpenTableCreate, autoUpdate } from '../../../../../redux/ordersReduser';\r\nimport {Box,Typography,Autocomplete, TextField} from '@mui/material';\r\nimport { useState } from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport {autocompliteInputStyle, textFieldStyles } from '../../order/forms/styles';\r\nimport { setOrderStatusUpdate, getAllStatuses, getFilteredOrders, getAllOrders } from '../../../../../redux/asyncThunc';\r\nimport { useEffect } from 'react';\r\nimport { IdComponent } from '../idComponent';\r\nimport { ModalComponent } from '../modalComponent';\r\n\r\nconst StatusUpdate = () =>{\r\n    const dispatch = useDispatch();\r\n    const statuses = useSelector((state) => state.ordersAll.getStatuses);\r\n    const defaultStatus = statuses.find(str=> str.id === '4'); \r\n    const openstatusUpdate = useSelector((state) => state.ordersAll.modalControl.status_update);\r\n    const isStatusUpdated =  useSelector((state) => state.ordersAll.isStatusUpdated);\r\n    const filteredRows = useSelector((state) => state.ordersAll.tHeadColumnFiltered);\r\n    const renderFilteredStatus = statuses.reduce((acc, status, index, array)=>{\r\n        if (acc.findIndex(n=>n.name === status.name) === -1) {\r\n            acc.push(status)\r\n        }\r\n       return acc\r\n     },[])\r\n    const [status, setStatus] = useState(0);\r\n    \r\n    let selected =  [];\r\n    if (sessionStorage.getItem(\"selected\")) {\r\n        selected =  sessionStorage.getItem(\"selected\")?.split(',');\r\n    }\r\n\r\n\r\nuseEffect(()=>{\r\n   \r\nif (isStatusUpdated) {\r\n    successAlert()\r\n    getUpdate()   \r\n    dispatch(autoUpdate({id: 'isStatusUpdated', str: false}));\r\n}\r\n},[isStatusUpdated])\r\n\r\n\r\nconst successAlert = () => {\r\n    withReactContent(Swal).fire({  \r\n        title: isStatusUpdated?'Переміщено':'Увага!',  \r\n        text: isStatusUpdated?'Замовлення успішно переміщено':'Не всі статуси оновлено',\r\n        icon: isStatusUpdated?'success':'error',\r\n        confirmButtonColor: '#3085d6',\r\n        confirmButtonText: 'Ok',\r\n      })\r\n    \r\n}\r\n\r\n\r\nconst handleClouse =(e)=>{\r\n   \r\n  dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n}\r\nconst listStyle={\r\n    display: 'flex',\r\n    padding: '7px 12px',\r\n    borderRadius: '8px',\r\n    width: 'max-content'\r\n   \r\n}\r\n\r\nconst handleSubmit=()=>{\r\n    successAlert()\r\n    dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n    if (selected[0] && selected.length === 1) {\r\n        dispatch(setOrderStatusUpdate({id: selected[0], status: String(status)}))\r\n        } else if(selected.length > 1){\r\n            selected.map(n=>{\r\n                if (Number(n)) {\r\n                    dispatch(setOrderStatusUpdate({id: String(n), status: String(status)}))\r\n                }\r\n            })\r\n        }  \r\n          \r\n};\r\n\r\nconst onAutocompliteChange=(e)=>{    \r\n    let ind = e.target.id.split('-')[2]     \r\nif (Number(ind)) {\r\n    setStatus(statuses[ind].id)\r\n}\r\n};\r\nconst getUpdate = ()=>{\r\n    dispatch(getAllStatuses());\r\n    if (filteredRows?.length > 0) {\r\n      dispatch(getFilteredOrders())\r\n    } else dispatch(getAllOrders())\r\n  }\r\n\r\nconst Component = ()=>(\r\n  <DialogContent>\r\n        \r\n  <Box sx={{width: '100%'}}>\r\n      <Box sx={{ marginTop: '20px'}}>\r\n      <Typography sx={{fontSize: '16px', margin: '10px 0' }}>{'Новий статус:'}</Typography>\r\n      <Autocomplete\r\n          id={'status'}\r\n          onChange={onAutocompliteChange}\r\n          value={defaultStatus}                \r\n          options={renderFilteredStatus}\r\n          getOptionLabel={(option) => option.name}\r\n          renderOption={(props, option, { selected }) => (\r\n              <li key={option.id} style={listStyle} {...props}>\r\n                {option.style && <span style={{display: 'block',width: '15px', height: '15px', \r\n                borderRadius: '50%', backgroundColor: option.style, marginRight: '10px'}}></span>}\r\n                {option.name}\r\n              </li>\r\n            )}              \r\n            sx={autocompliteInputStyle}\r\n            renderInput={(params) => <TextField sx={textFieldStyles}  {...params} />}\r\n        />\r\n      </Box>\r\n\r\n  <IdComponent/>\r\n  </Box >\r\n  </DialogContent>\r\n)\r\n\r\n    return(\r\n\r\n      <ModalComponent Component={Component} funcOnClouse={handleClouse} open={openstatusUpdate} sendButtonText={'Зберегти'} titleText={\"Змінити статус для кількох замовлень\"}\r\n      funcOnSend={handleSubmit} borderHeader={true} borderAction={false} alignAction={true}/>\r\n \r\n    )\r\n}\r\n\r\nexport default StatusUpdate"],"names":["IdComponent","selected","sessionStorage","getItem","split","sx","fontSize","marginTop","display","width","flexWrap","map","str","i","arr","length","Transition","forwardRef","props","ref","direction","ModalComponent","Component","open","closeButtonText","sendButtonText","titleText","funcOnSend","funcOnClouse","borderHeader","borderAction","alignAction","TransitionComponent","onClose","bottom","alignItems","justifyContent","borderBottom","colorsRef","whiteSpace","onClick","component","marginRight","borderTop","paddingTop","paddingBottom","textAlign","marginLeft","S","text","func","border","dispatch","useDispatch","statuses","useSelector","state","ordersAll","getStatuses","defaultStatus","find","id","openstatusUpdate","modalControl","status_update","isStatusUpdated","filteredRows","tHeadColumnFiltered","renderFilteredStatus","reduce","acc","status","index","array","findIndex","n","name","push","useState","setStatus","useEffect","successAlert","getUpdate","autoUpdate","withReactContent","Swal","fire","title","icon","confirmButtonColor","confirmButtonText","listStyle","padding","borderRadius","onAutocompliteChange","e","ind","target","Number","getAllStatuses","getFilteredOrders","getAllOrders","margin","onChange","value","options","getOptionLabel","option","renderOption","style","height","backgroundColor","autocompliteInputStyle","renderInput","params","textFieldStyles","getOpenTableCreate","setOrderStatusUpdate","String"],"sourceRoot":""}