{"version":3,"file":"static/js/681.fdfd7c2f.chunk.js","mappings":"yRAuGA,UA1FA,WAA6B,IAAD,EACpBA,GAAWC,EAAAA,EAAAA,MAEnB,GAAwCC,EAAAA,EAAAA,MAAiB,eAAlDC,EAAY,KAAEC,EAAe,KAC9BC,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUC,mBAAmB,IACzEC,GAAWJ,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUG,WAAW,IAC7DC,GAAWC,EAAAA,EAAAA,MAEXC,GADaX,EAAaY,IAAI,WAChBT,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUQ,UAAU,KAC/DC,EAAmBH,EAAYJ,EAASQ,WAAU,SAAAC,GAAC,OAAEA,EAAEC,KAAON,CAAW,IAAE,EACjF,GAA0BO,EAAAA,EAAAA,UAASC,OAAOL,IAAkB,eAArDM,EAAK,KAAEC,EAAQ,KAUdC,GAAU,GACdC,gBAAiBC,EAAAA,EAAAA,aAAoB,sBAC9BC,EAAAA,EAAAA,eAA8B,CACnC,iBAAkB,CAAEC,QAAS,IAC7BC,UAAW,UACZ,SACD,uBAAwB,CACtBJ,gBAAiB,OACjBK,MAAO,IACR,GAGCC,EAAa,SAACC,GAClBrB,GAASsB,EAAAA,EAAAA,IAAW,CAACd,GAAI,QAASe,IAAK,KACvCvB,GAASsB,EAAAA,EAAAA,IAAW,CAACd,GAAI,OAAQe,IAAK,KACtC,IAAIA,EAAMF,EAAEG,OAAOhB,GACC,MAAhBa,EAAEG,OAAOhB,IAA8B,IAAhBa,EAAEG,OAAOhB,IAClCR,GAASsB,EAAAA,EAAAA,IAAW,CAACd,GAAG,aAAce,IAAK,QAC3CnC,EAAS,qBACAsB,OAAOa,KAChBvB,GAASsB,EAAAA,EAAAA,IAAW,CAACd,GAAG,aAAce,IAAKA,KAC3C/B,GAAgBiC,EAAAA,EAAAA,IAAmB,CAAEC,OAAQH,MAE/CI,GACF,EAGMA,EAAY,WAChBC,eAAeC,QAAQ,WAAY,KACnB,OAAZpC,QAAY,IAAZA,OAAY,EAAZA,EAAcqC,QAAS,EACzB9B,GAAS+B,EAAAA,EAAAA,OACJ/B,GAASgC,EAAAA,EAAAA,MAElB,EAKE,OACE,SAAC,IAAG,CAACC,GA/CS,CACdC,SAAU,EACVC,SAAU,OACVrB,gBAAiB,OACjBI,UAAW,QA2CQ,UACjB,UAAC,IAAI,CACHP,MAAOA,EACPyB,SARa,SAACC,EAAOC,GAC1B1B,EAAS0B,EACZ,EAOQC,QAAQ,aACRC,eAAa,EACbC,0BAAwB,EACxB,aAAW,8BACXR,GAAIpB,EAAW,UAIff,EAAS4C,KAAI,SAACC,EAAKC,GAAG,OACtB,SAAC,IAAG,CAACC,QAASzB,EAAaZ,GAAImC,EAAInC,GACnCyB,GAAI,CAAEa,UAAU,aAAD,OAAeH,EAAII,OAASC,QAAS,WAAWC,SAAU,OAAOC,MAAOnC,EAAAA,EAAAA,mBACtFoC,SAAU,cAAeC,UAAW,OAASlC,UAAW,OACzDmC,OAAQ,kBAAmBC,cAAe,OAC1CxC,gBAAiBC,EAAAA,EAAAA,mBACnB,iBAAkB,CAACmC,MAAOnC,EAAAA,EAAAA,mBAA6BD,gBAAgB,SAG3DyC,MAAK,UAAMZ,EAAIa,KAAI,aAAKb,EAAIc,QAAjCb,EAA4C,KAIlD,SAAC,IAAa,CAACc,UAAU,QAKhC,C","sources":["components/tableBody/pages/order/tableInBody.jsx"],"sourcesContent":["import {useState, useEffect} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Tabs, { tabsClasses } from '@mui/material/Tabs';\r\nimport {Tab} from '@mui/material';\r\nimport {colorsRef} from '../../../../consts/colorConstants';\r\n\r\nimport {AddStatusForm} from '../modals/modalAddStatus';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getSortDate, autoUpdate } from '../../../../redux/ordersReduser';\r\nimport { getAllOrders, getFilteredOrders } from '../../../../redux/asyncThunc';\r\nimport { useParams, useSearchParams, useLocation,useNavigate, createSearchParams } from \"react-router-dom\";\r\n\r\n\r\nfunction ScrollTabsButton() {\r\n  const navigate = useNavigate();\r\n  \r\nconst [searchParams, setSearchParams] = useSearchParams();\r\nconst filteredRows = useSelector((state) => state.ordersAll.tHeadColumnFiltered);\r\nconst statuses = useSelector((state) => state.ordersAll.getStatuses);\r\nconst dispatch = useDispatch();\r\nconst statusName = searchParams.get('status');\r\nconst seachStatus = useSelector((state) => state.ordersAll.statusName);\r\nconst initStatusSelect = seachStatus?statuses.findIndex(n=>n.id === seachStatus):0\r\nconst [value, setValue] = useState(Number(initStatusSelect));\r\n\r\n  const boxStyles={\r\n    flexGrow: 1,\r\n    maxWidth: '100%',\r\n    backgroundColor: '#fff',\r\n    maxHeight: '32px',\r\n\r\n  }\r\n\r\n  const tabsStyles ={\r\n    backgroundColor: colorsRef.tabBgColor,\r\n    [`& .${tabsClasses.scrollButtons}`]: {\r\n      '&.Mui-disabled': { opacity: 0.3 },\r\n      maxHeight: '32px',\r\n    },\r\n    '& .MuiTabs-indicator': {\r\n      backgroundColor: '#fff',\r\n      width: 0,\r\n    },\r\n   }\r\n\r\nconst handleClick =(e)=>{\r\n  dispatch(autoUpdate({id: 'start', str: 0}));\r\n  dispatch(autoUpdate({id: 'page', str: 0}))\r\n  let str = e.target.id;\r\n  if (e.target.id === '0' || e.target.id === 0) {\r\n    dispatch(autoUpdate({id:'statusName', str: null}));\r\n    navigate('/trendcrm/orders');\r\n  } else if (Number(str)) {\r\n    dispatch(autoUpdate({id:'statusName', str: str}));\r\n    setSearchParams(createSearchParams({ status: str }));\r\n  }\r\n  getUpdate()\r\n}\r\n\r\n\r\nconst getUpdate = ()=>{\r\n  sessionStorage.setItem(\"selected\", '');\r\n  if (filteredRows?.length > 0) {\r\n    dispatch(getFilteredOrders())\r\n  } else dispatch(getAllOrders())\r\n  // removeAllColor()\r\n}\r\nconst handleChange = (event, newValue) => {\r\n   setValue(newValue);\r\n};\r\n\r\n  return (\r\n    <Box sx={boxStyles} >\r\n      <Tabs\r\n        value={value}\r\n        onChange={handleChange}\r\n        variant=\"scrollable\"\r\n        scrollButtons\r\n        allowScrollButtonsMobile\r\n        aria-label=\"visible arrows tabs example\"\r\n        sx={tabsStyles}\r\n       \r\n      >\r\n          \r\n       {statuses.map((tab, ind) =>(        \r\n        <Tab onClick={handleClick} id={tab.id}\r\n        sx={{ borderTop: `6px solid ${tab.style}`, padding: '0px 10px',fontSize: '12px',color: colorsRef.tabHeaderTextColor,\r\n         minWidth: 'min-content', minHeight: '32px',  maxHeight: '32px', \r\n        margin: '0px 1px 0px 1px', textTransform: 'none',\r\n        backgroundColor: colorsRef.tableHeaderBgColor,\r\n      '&.Mui-selected': {color: colorsRef.tabHeaderTextColor,backgroundColor:'#fff'\r\n         }\r\n      }}\r\n        key={ind} label= {`${tab.name}: ${tab.count}`} />\r\n       \r\n       ))}\r\n       \r\n       <AddStatusForm isbutton={true}/>\r\n      </Tabs>\r\n     \r\n    </Box> \r\n  );\r\n}\r\nexport default ScrollTabsButton"],"names":["navigate","useNavigate","useSearchParams","searchParams","setSearchParams","filteredRows","useSelector","state","ordersAll","tHeadColumnFiltered","statuses","getStatuses","dispatch","useDispatch","seachStatus","get","statusName","initStatusSelect","findIndex","n","id","useState","Number","value","setValue","tabsStyles","backgroundColor","colorsRef","tabsClasses","opacity","maxHeight","width","handleClick","e","autoUpdate","str","target","createSearchParams","status","getUpdate","sessionStorage","setItem","length","getFilteredOrders","getAllOrders","sx","flexGrow","maxWidth","onChange","event","newValue","variant","scrollButtons","allowScrollButtonsMobile","map","tab","ind","onClick","borderTop","style","padding","fontSize","color","minWidth","minHeight","margin","textTransform","label","name","count","isbutton"],"sourceRoot":""}