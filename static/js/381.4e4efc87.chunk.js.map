{"version":3,"file":"static/js/381.4e4efc87.chunk.js","mappings":"uPASMA,GAAQC,EAAAA,EAAAA,aAAW,SAAeC,EAAOC,GAC7C,OAAO,SAAC,KAAQ,QAACC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,UAAaH,GAChE,IAEe,SAASI,IACpB,IAAMC,GAASC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,WAAS,GAAM,eAAhCC,EAAI,KAAEC,EAAO,KACdC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUH,OAAO,IACxDI,GAAOH,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,UAAUE,WAAW,IAEzDC,EAAc,SAACC,EAAOC,GACX,cAAXA,IAGJb,GAASc,EAAAA,EAAAA,IAAW,CAACC,GAAI,UAAWC,IAAK,MAEvCZ,GAAQ,GACZ,EAUA,OARAa,EAAAA,EAAAA,YAAU,YACA,OAAPZ,QAAO,IAAPA,OAAO,EAAPA,EAASa,QAAQ,IAClBd,GAAQ,GACRe,QAAQC,IAAI,sBAAuBf,GAErC,GAAE,CAACA,KAKC,SAAC,IAAQ,CACRF,KAAMA,EACLkB,iBAAkB,IACjBC,QAASX,EACTY,aAAc,CAAGC,SAAU,SAAUC,WAAY,SAAU,UAE5D,UAAChC,EAAK,CAAC6B,QAASX,EAAae,SAAiB,KAAPjB,EAAUA,EAAK,UAAWkB,GAAI,CAAEC,MAAO,OAAQC,WAAW,UAAW,UAC3GxB,EAAQ,IAAG,SAAC,IAAU,CAACsB,GAAI,CAACG,QAAS,SAAS,SAAEzB,EAAQ,KAAiB,KACzEA,EAAQ,IAAG,SAAC,IAAU,CAACsB,GAAI,CAACG,QAAS,SAAS,SAAEzB,EAAQ,KAAiB,SAMlF,C","sources":["components/alerts/notification.jsx"],"sourcesContent":["import {forwardRef,useState, useEffect} from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Typography } from '@mui/material';\r\nimport { autoUpdate } from '../../redux/ordersReduser';\r\n\r\nconst Alert = forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function CustomizedSnackbars() {\r\n    const dispatch=useDispatch();\r\n  const [open, setOpen] = useState(false);\r\n  const message = useSelector((state) => state.ordersAll.message);\r\n  const type = useSelector((state) => state.ordersAll.typeMessage);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(autoUpdate({id: 'message', str: ''}));\r\n    \r\n      setOpen(false);\r\n  };\r\n \r\n  useEffect(()=>{\r\n if (message?.length >0) {\r\n    setOpen(true) \r\n    console.log('CustomizedSnackbars', message);\r\n}\r\n  },[message])\r\n\r\n\r\n  return (\r\n\r\n      <Snackbar\r\n       open={open}\r\n        autoHideDuration={6000}\r\n         onClose={handleClose}\r\n         anchorOrigin={{  vertical: 'bottom', horizontal: 'right',}}\r\n         >\r\n        <Alert onClose={handleClose} severity={type!==''?type:\"success\"} sx={{ width: '100%', alignItems:'center' }}>\r\n        {message[0]?<Typography sx={{display: 'block'}}>{message[0]}</Typography>:null}\r\n        {message[1]?<Typography sx={{display: 'block'}}>{message[1]}</Typography>:null}\r\n         </Alert>\r\n      </Snackbar>\r\n\r\n \r\n  );\r\n}"],"names":["Alert","forwardRef","props","ref","elevation","variant","CustomizedSnackbars","dispatch","useDispatch","useState","open","setOpen","message","useSelector","state","ordersAll","type","typeMessage","handleClose","event","reason","autoUpdate","id","str","useEffect","length","console","log","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","alignItems","display"],"sourceRoot":""}