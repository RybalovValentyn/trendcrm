{"version":3,"file":"static/js/451.6696e99d.chunk.js","mappings":"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","sources":["components/tableBody/pages/modals/modalcomponent/statusupdate.jsx"],"sourcesContent":["import DialogContent from '@mui/material/DialogContent';\r\nimport { useDispatch, useSelector,  } from 'react-redux';\r\nimport { getOpenTableCreate, autoUpdate, alertMessageUpdate } from '../../../../../redux/ordersReduser';\r\nimport {Box,Typography,Autocomplete, TextField} from '@mui/material';\r\nimport { useState } from 'react';\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content';\r\nimport {autocompliteInputStyle, textFieldStyles } from '../../order/forms/styles';\r\nimport { setOrderStatusUpdate, getAllStatuses, getFilteredOrders, getAllOrders } from '../../../../../redux/asyncThunc';\r\nimport { useEffect } from 'react';\r\nimport { IdComponent } from '../idComponent';\r\nimport { ModalComponent } from '../modalComponent';\r\n\r\nconst StatusUpdate = () =>{\r\n    const dispatch = useDispatch();\r\n    const statuses = useSelector((state) => state.ordersAll.getStatuses);\r\n    let defaultStatus = statuses.find(str=> str.id === '4'); \r\n    const openstatusUpdate = useSelector((state) => state.ordersAll.modalControl.status_update);\r\n    const columns = useSelector((state) => state.ordersAll.columns);\r\n    const isStatusUpdated =  useSelector((state) => state.ordersAll.isStatusUpdated);\r\n    const filteredRows = useSelector((state) => state.ordersAll.tHeadColumnFiltered);\r\n    const renderFilteredStatus = statuses.reduce((acc, status, index, array)=>{\r\n         if (acc.findIndex(n=>n.name === status.name) === -1 && status.id !== 0) {\r\n            acc.push(status)\r\n        }\r\n       return acc\r\n     },[])\r\n\r\n\r\n    const [status, setStatus] = useState(0);\r\n    const [open, setOpen]= useState(false)\r\n    let selected =  [];\r\n    if (sessionStorage.getItem(\"selected\")) {\r\n        selected =  sessionStorage.getItem(\"selected\")?.split(',');\r\n    }\r\n    if (selected.length >0) {\r\n      let idStatus = columns?.find(n=>n.id === selected[0])?.status       \r\n      defaultStatus =  statuses?.find(str=> str.id === idStatus);\r\n    }\r\n\r\nuseEffect(()=>{\r\n   \r\nif (isStatusUpdated) {\r\n  setOpen(true)\r\n  if (!open) {\r\n    successAlert()\r\n  }\r\n    \r\n    // getUpdate()   \r\n    dispatch(autoUpdate({id: 'isStatusUpdated', str: false}));\r\n}\r\n},[isStatusUpdated])\r\n\r\n\r\nconst successAlert = () => {\r\n  // console.log('successAlert');\r\n    dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n    withReactContent(Swal).fire({  \r\n        title: isStatusUpdated?'Переміщено':'Увага!',  \r\n        text: isStatusUpdated?'Замовлення успішно переміщено':'Не всі статуси оновлено',\r\n        icon: isStatusUpdated?'success':'error',\r\n        confirmButtonColor: '#3085d6',\r\n        confirmButtonText: 'Ok',\r\n      }).then((result) => {        \r\n        if (result.isConfirmed) {\r\n          setOpen(false)\r\n           getUpdate()\r\n                }\r\n      });     \r\n}\r\n\r\n\r\nconst handleClouse =(e)=>{   \r\n  dispatch(getOpenTableCreate({id: 'status_update', str: false}));\r\n  setStatus(0)\r\n}\r\nconst listStyle={\r\n    display: 'flex',\r\n    padding: '7px 12px',\r\n     width: '100%',\r\n   \r\n    \r\n   \r\n}\r\n\r\nconst handleSubmit=()=>{\r\n   if (!selected || selected.length === 0) {\r\n   return dispatch(alertMessageUpdate({message: 'idSelectedWarn', type: 'warn'}))\r\n   } else if (selected[0] && selected.length === 1) {      \r\n        dispatch(setOrderStatusUpdate({id: selected[0], status: String(status.id)}))\r\n        successAlert()\r\n        return\r\n        } else if(selected.length > 1){\r\n            \r\n            selected.map((n, i)=>{\r\n                if (Number(n)) {\r\n                      dispatch(setOrderStatusUpdate({id: String(n), status: String(status.id)}))\r\n                    if (i === selected.length-1) {\r\n                      successAlert()\r\n                    }\r\n                }\r\n            })\r\n            return\r\n        }  \r\n          \r\n};\r\n\r\nconst onAutocompliteChange=(e)=>{    \r\n    let ind = e.target.id.split('-')[2]  \r\nif (Number(ind)) {\r\n    setStatus(renderFilteredStatus[ind])\r\n}\r\n};\r\nconst getUpdate = ()=>{\r\n    dispatch(getAllStatuses());    \r\n    if (filteredRows?.length > 0) {\r\n      dispatch(getFilteredOrders())\r\n    } else dispatch(getAllOrders())\r\n  }\r\n\r\nconst Component = ()=>(\r\n  <DialogContent>\r\n        \r\n  <Box sx={{width: '100%'}}>\r\n      <Box sx={{ marginTop: '20px'}}>\r\n      <Typography sx={{fontSize: '16px', margin: '10px 0' }}>{'Новий статус:'}</Typography>\r\n      <Autocomplete\r\n          id={'status'}\r\n          disableClearable\r\n          onChange={onAutocompliteChange}\r\n          value={status?status:(defaultStatus?defaultStatus:null)}    \r\n          // defaultValue ={defaultStatus?defaultStatus:null}           \r\n          options={renderFilteredStatus}\r\n          getOptionLabel={(option) => option.name}\r\n          renderOption={(props, option, { selected }) => (\r\n              <li key={option.id} style={listStyle} {...props}>\r\n                {option.style && <span style={{display: 'block',width: '15px', height: '15px', \r\n                borderRadius: '50%', backgroundColor: option.style, marginRight: '10px'}}></span>}\r\n                {option.name}\r\n              </li>\r\n            )}              \r\n            sx={autocompliteInputStyle}\r\n            renderInput={(params) => <TextField sx={textFieldStyles}  {...params} />}\r\n        />\r\n      </Box>\r\n\r\n  <IdComponent/>\r\n  </Box >\r\n  </DialogContent>\r\n)\r\n\r\n    return(\r\n\r\n      <ModalComponent Component={Component} funcOnClouse={handleClouse} open={openstatusUpdate} sendButtonText={'Зберегти'} titleText={\"Змінити статус для кількох замовлень\"}\r\n      funcOnSend={handleSubmit} borderHeader={true} borderAction={false} alignAction={true}/>\r\n \r\n    )\r\n}\r\n\r\nexport default StatusUpdate"],"names":["dispatch","useDispatch","statuses","useSelector","state","ordersAll","getStatuses","defaultStatus","find","str","id","openstatusUpdate","modalControl","status_update","columns","isStatusUpdated","filteredRows","tHeadColumnFiltered","renderFilteredStatus","reduce","acc","status","index","array","findIndex","n","name","push","useState","setStatus","open","setOpen","selected","sessionStorage","getItem","split","length","idStatus","useEffect","successAlert","autoUpdate","getOpenTableCreate","withReactContent","Swal","fire","title","text","icon","confirmButtonColor","confirmButtonText","then","result","isConfirmed","getUpdate","listStyle","display","padding","width","onAutocompliteChange","e","ind","target","Number","getAllStatuses","getFilteredOrders","getAllOrders","Component","sx","marginTop","fontSize","margin","disableClearable","onChange","value","options","getOptionLabel","option","renderOption","props","style","height","borderRadius","backgroundColor","marginRight","autocompliteInputStyle","renderInput","params","textFieldStyles","funcOnClouse","sendButtonText","titleText","funcOnSend","setOrderStatusUpdate","String","map","i","alertMessageUpdate","message","type","borderHeader","borderAction","alignAction"],"sourceRoot":""}